---
description:
globs:
alwaysApply: false
---
# Build System and Language Bindings

## Build System Overview

The project supports multiple build systems for different environments and language bindings.

### Primary Build Tools

#### tree-sitter CLI
- **Primary tool**: `tree-sitter generate` to regenerate parser from [grammar.js](mdc:grammar.js)
- **Testing**: `tree-sitter test` to run the test suite
- **Development**: `tree-sitter playground` for interactive grammar testing

#### Makefile
The [Makefile](mdc:Makefile) provides C library compilation:
- `make all` - Build static library (.a) and shared library (.so/.dylib) 
- `make install` - Install system-wide in PREFIX (default: /usr/local)
- `make test` - Run tree-sitter tests
- `make clean` - Clean build artifacts

#### npm Scripts  
From [package.json](mdc:package.json):
- `npm run prestart` - Build WASM version (`tree-sitter build --wasm`)
- `npm start` - Launch playground (`tree-sitter playground`)
- `npm test` - Run Node.js binding tests
- `npm install` - Install and build native bindings

## Language Bindings

### Supported Languages
Based on [tree-sitter.json](mdc:tree-sitter.json), the project supports bindings for:

#### C Bindings (`bindings/c/`)
- Core implementation
- Header files and pkg-config support
- System-wide installation via Makefile

#### Rust Bindings (`bindings/rust/`)
- Configuration in [Cargo.toml](mdc:Cargo.toml)
- Rust crate with tree-sitter integration

#### Python Bindings (`bindings/python/`)
- Configuration in [pyproject.toml](mdc:pyproject.toml) and [setup.py](mdc:setup.py)
- pip-installable package

#### Node.js Bindings (`bindings/node/`)
- Configuration in [package.json](mdc:package.json) and [binding.gyp](mdc:binding.gyp)
- Native addon using node-addon-api
- Prebuild support with prebuildify

#### Go Bindings (`bindings/go/`)
- Go module configuration in [go.mod](mdc:go.mod)

#### Swift Bindings (`bindings/swift/`)
- Swift Package Manager support in [Package.swift](mdc:Package.swift)

### Cross-Platform Build Support
- **CMake**: [CMakeLists.txt](mdc:CMakeLists.txt) for cross-platform C builds
- **Platform detection**: Makefile handles macOS (.dylib) vs Linux (.so) differences
- **Windows exclusion**: Makefile explicitly excludes Windows builds

## Generated Files (Don't Edit)

The following files are auto-generated and should not be manually edited:
- **[src/parser.c](mdc:src/parser.c)** - Generated C parser (24K+ lines)
- **[src/grammar.json](mdc:src/grammar.json)** - JSON representation of grammar
- **[src/node-types.json](mdc:src/node-types.json)** - Node type definitions

## Development Workflow

### Making Grammar Changes
1. Edit [grammar.js](mdc:grammar.js)
2. Run `tree-sitter generate` to update generated files
3. Test with `tree-sitter test`
4. Build bindings as needed for your target language

### Building for Distribution
1. Generate parser: `tree-sitter generate`
2. Build C library: `make all`
3. Build language-specific bindings as needed
4. Run full test suite: `tree-sitter test && npm test`

### Debugging Build Issues
- Check tree-sitter CLI version compatibility
- Ensure Node.js and npm are up to date for Node bindings
- Verify C compiler and build tools are available
- Use `make clean` to clean build artifacts if needed
