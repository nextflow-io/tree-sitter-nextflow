---
description: for general project navigation and understanding
globs: 
alwaysApply: false
---
# Nextflow Tree-sitter Parser Project Overview

This is a comprehensive tree-sitter parser for the Nextflow language, created by Edmund Miller. The project provides parsing capabilities for Nextflow workflow definition files (.nf files) and related configuration files.

## Core Components

### Main Grammar Definition
- **[grammar.js](mdc:tree-sitter-nextflow/grammar.js)** - The primary grammar definition file that defines the Nextflow language syntax rules
  - Contains the main `grammar()` function with all parsing rules
  - Defines conflicts, extras, and the complete rule hierarchy
  - Supports Nextflow DSL features including processes, workflows, channels, and more

### Generated Parser Files (src/)
- **[src/parser.c](mdc:tree-sitter-nextflow/src/parser.c)** - Auto-generated C parser (24K+ lines, don't edit manually)
- **[src/grammar.json](mdc:tree-sitter-nextflow/src/grammar.json)** - JSON representation of the grammar
- **[src/node-types.json](mdc:tree-sitter-nextflow/src/node-types.json)** - Node type definitions for the parser

### Configuration Files
- **[package.json](mdc:tree-sitter-nextflow/package.json)** - Node.js package configuration with scripts and dependencies
- **[tree-sitter.json](mdc:tree-sitter-nextflow/tree-sitter.json)** - Tree-sitter specific configuration
- **[Makefile](mdc:tree-sitter-nextflow/Makefile)** - Build system for C library compilation
- **[Cargo.toml](mdc:tree-sitter-nextflow/Cargo.toml)** - Rust binding configuration
- **[pyproject.toml](mdc:tree-sitter-nextflow/pyproject.toml)** - Python binding configuration

## Language Bindings
The project supports multiple language bindings in the **bindings/** directory:
- **C** - Core C implementation
- **Rust** - Rust bindings
- **Python** - Python bindings  
- **Node.js** - JavaScript/TypeScript bindings
- **Go** - Go bindings
- **Swift** - Swift bindings

## Testing Infrastructure
- **[test/corpus/](mdc:tree-sitter-nextflow/test/corpus)** - Comprehensive test corpus with 19 test files covering:
  - Basic language features (comments, declarations, variables)
  - Process and workflow definitions
  - Channel operations and advanced channels
  - String interpolation and advanced strings
  - Control structures and error handling
  - Binary expressions and operators
  - DSL2 features and configuration

## Supported File Types
Based on [tree-sitter.json](mdc:tree-sitter-nextflow/tree-sitter.json), the parser handles:
- `.nf` - Standard Nextflow workflow files
- `.nf.test` - Nextflow test files
- `nextflow.config` - Nextflow configuration files

## Development Workflow
- Use `tree-sitter generate` to regenerate parser after grammar changes
- Run `tree-sitter test` to execute the test suite
- Use `tree-sitter playground` for interactive testing
- Build bindings using language-specific build tools
